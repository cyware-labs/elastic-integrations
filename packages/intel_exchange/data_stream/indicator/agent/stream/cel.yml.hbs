config_version: 3
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if ioc_duration_before_deletion}}
fields_under_root: true
fields:
  _conf:
    ioc_duration_before_deletion: "{{ioc_duration_before_deletion}}"
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  access_id: {{access_id}}
  secret_key: {{secret_key}}
  page_size: {{page_size}}
  page_number: {{page_number}}
  want_more: false
program: |-
	state.with(
        {
                "expires":  int(now + duration("28s")),
                "signature":  string(state.access_id + "\n" + string(int(now + duration("28s")))).hmac("sha1", bytes(state.secret_key)).base64()
        }
	).as(state,
        state.with(
                request(
                        "GET",
                        state.url.trim_right("/") + "/ingestion/rules/save_result_set/?" + {
                                "page_size": [string(state.page_size)],
                                "page": [string(state.page_number)],
                                "version": [string("v3")],
                                "AccessID": [state.access_id],
                                "Expires": [string(state.expires)],
                                "Signature": [state.signature]
                        }.format_query()
                )
        ).do_request().as(resp,
                (resp.StatusCode == 200) ?
                        bytes(resp.Body).decode_json().as(body,
                                {
                                        "events": body.results.map(e,
                                                {
                                                        "message": e.encode_json(),
                                                }
                                        ),
                                }
                        )
                :
                        {
                                "events": {
                                        "error": {
                                                "code": string(resp.StatusCode),
                                                "id": string(resp.Status),
                                                "message": "GET:" + 
                                                (
                                                        (size(resp.Body) != 0) ?
                                                                string(resp.Body)
                                                        :
                                                                string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                                                ),
                                        },
                                },
                                "want_more": false,
                        }
        )
)
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
